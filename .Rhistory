```
We proofed that there are no more NA's left in the cancer and healthy data frames.
```{r}
sum(is.na(transposed_cancer_beta_values))
sum(is.na(transposed_healthy_beta_values))
```
There are some important genes for MCL which have ofen a different methylation pattern in comparison to heatlhy b-cells. These genes are:
Gene     |Ensembl
---------|----------------
SOX11	   |ENSG00000176887
NR2F2	   |ENSG00000185551
p53  	   |ENSG00000141510
AHR  	   |ENSG00000106546
ROBO1	   |ENSG00000169855
SOX9 	   |ENSG00000125398
HOXA9	   |ENSG00000078399
CDH1 	   |ENSG00000039068
CDC14B	 |ENSG00000081377
FOXC1	   |ENSG00000054598
G0S2	   |ENSG00000123689
GPX3	   |ENSG00000211445
LGALS3	 |ENSG00000131981
MAL  	   |ENSG00000172005
NPTX2	   |ENSG00000106236
PAX6	   |ENSG00000007372
TFPI2	   |ENSG00000105825
THEM4	   |ENSG00000159445
TWIST1	 |ENSG00000122691
To be sure we did not removed these genes in our data processing we tested if they are still all in our data frames. Because each of the 2 data frames contains the same genes it is enough to check if they are part of one of them.
```{r}
important_genes <-
data.frame(
c(
"ENSG00000176887",
"ENSG00000185551",
"ENSG00000141510",
"ENSG00000110092",
"ENSG00000106546",
"ENSG00000169855",
"ENSG00000125398",
"ENSG00000078399",
"ENSG00000039068",
"ENSG00000081377",
"ENSG00000054598",
"ENSG00000123689",
"ENSG00000211445",
"ENSG00000131981",
"ENSG00000172005",
"ENSG00000106236",
"ENSG00000007372",
"ENSG00000105825",
"ENSG00000159445",
"ENSG00000122691"
)
)
important_genes_in_data_set <- data.frame()
for (i in 1:nrow(important_genes)) {
important_genes_in_data_set[i, ] <-
cancer_beta_values[which(row.names(cancer_beta_values) == important_genes[i, ]), ]
}
sum(is.na(important_genes_in_data_set))
```
Now, we can test if we fulfilled our initial requirement of retaining around 90 % of the information.
```{r}
dim(cancer_beta_values)/dim(Gene_data_frame_x_y)
```
It so happens that we kept slightly over 90 % of the information (91.1 %). That is more than we expected and therefore our quality control was successful.
We can continue to our next step: data normalization and visualization.
# References
Sharp, A.J., Stathaki, E., Migliavacca, E., Brahmachary, M., Montgomery, S.B., Dupre, Y., and Antonarakis, S.E. (2011). DNA methylation profiles of human active and inactive X chromosomes. Genome Res 21, 1592-1600.
setwd("C:\Users\Franzi\Documents\Uni\4. Semester\Bioinfo\MantlevsBcell")
setwd("C:/Users/Franzi/Documents/Uni/4. Semester/Bioinfo/MantlevsBcell")
#Franzi changes working environment
setwd("C:/Users/Franzi/Documents/Uni/4. Semester/Bioinfo/MantlevsBcell")
#Load sample data
Samples <- readRDS(file = "Mantle-Bcell_list.RDS.gz")
setwd("C:/Users/Franzi/Documents/Uni/4. Semester/Bioinfo/MantlevsBcell")
cancer_m_values <-
data.frame(log2(cancer_beta_values / (1 - cancer_beta_values)))
healthy_m_values <-
data.frame(log2(healthy_beta_values / (1 - healthy_beta_values)))
# changing healthy patients names
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_NBC_NC11_41.bed"] <-
"Bcell_naive_VB_NBC_NC11_41.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_NBC_NC11_83.bed"] <-
"Bcell_naive_VB_NBC_NC11_83.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_S001JP51.bed"] <-
"Bcell_naive_VB_S001JP51.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_S00DM851.bed"] <-
"Bcell_naive_VB_S00DM851.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_S01ECGA1.bed"] <-
"Bcell_naive_VB_S01ECGA1.M"
# changing cancer patients names
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FE8A1.bed"] <-
"cancer_VB_S01FE8A1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FF6A1.bed"] <-
"cancer_VB_S01FF6A1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FH2A1.bed"] <-
"cancer_VB_S01FH2A1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FJZA1.bed"] <-
"cancer_VB_S01FJZA1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FKXA1.bed"] <-
"cancer_VB_S01FKXA1.M"
# calculating mean, sd values and plotting a histogramm for each
mean_cancer_m_values <- rowMeans(cancer_m_values)
hist(
log10(mean_cancer_m_values),
breaks = "fd",
main = "Cancer M values: Mean frequency",
xlab = "Common logarithm of M values",
col = "indianred1",
border = "gray20",
xlim = c(-1, 1)
)
abline(v = log10(quantile(
mean_cancer_m_values,
probs = seq(0, 1, 0.1),
na.rm = TRUE
)),
col = "black",
lwd = 2)
mean_healthy_m_values <- rowMeans(healthy_m_values)
hist(
log10(mean_healthy_m_values),
breaks = "fd",
main = "Healthy M values: Mean frequency",
xlab = "Common logarithm of coverages",
col = "seagreen2",
border = "gray20",
xlim = c(-1, 1)
)
abline(v = log10(quantile(
mean_healthy_m_values,
probs = seq(0, 1, 0.1),
na.rm = TRUE
)),
col = "black",
lwd = 2)
sd_cancer_m_values <- apply(cancer_m_values, 1, sd)
hist(
log10(sd_cancer_m_values),
breaks = "fd",
main = "Cancer M values: SD frequency",
xlab = "Common logarithm of M values",
col = "indianred1",
border = "gray20"
)
sd_healthy_m_values <- apply(healthy_m_values, 1, sd)
hist(
log10(sd_healthy_m_values),
breaks = "fd",
col = "seagreen2",
main = "Healthy M values: SD frequency",
xlab = "Common logarithm of M values",
border = "gray20"
)
complete_cancer_m_values <-
cbind.data.frame(cancer_m_values, mean_cancer_m_values, sd_cancer_m_values)
complete_healthy_m_values <-
cbind.data.frame(healthy_m_values, mean_healthy_m_values, sd_healthy_m_values)
#showing mean cancer m-values vs. mean healthy m-values
install.packages("tidyverse")
library(tidyverse)
complete_cancer_m_values_gene <- complete_cancer_m_values[c(
"ENSG00000176887",
"ENSG00000185551",
"ENSG00000141510",
"ENSG00000110092",
"ENSG00000106546",
"ENSG00000169855",
"ENSG00000125398",
"ENSG00000078399",
"ENSG00000039068",
"ENSG00000081377",
"ENSG00000054598",
"ENSG00000123689",
"ENSG00000211445",
"ENSG00000131981",
"ENSG00000172005",
"ENSG00000106236",
"ENSG00000007372",
"ENSG00000105825",
"ENSG00000159445",
"ENSG00000122691"
), ]
complete_healthy_m_values_gene <- complete_healthy_m_values[c(
"ENSG00000176887",
"ENSG00000185551",
"ENSG00000141510",
"ENSG00000110092",
"ENSG00000106546",
"ENSG00000169855",
"ENSG00000125398",
"ENSG00000078399",
"ENSG00000039068",
"ENSG00000081377",
"ENSG00000054598",
"ENSG00000123689",
"ENSG00000211445",
"ENSG00000131981",
"ENSG00000172005",
"ENSG00000106236",
"ENSG00000007372",
"ENSG00000105825",
"ENSG00000159445",
"ENSG00000122691"
), ]
ggplot() +
geom_point(
mapping = aes(
x = complete_cancer_m_values$mean_cancer_m_values,
y = complete_healthy_m_values$mean_healthy_m_values
),
na.rm = TRUE,
alpha = 1 / 10
) +
geom_point(
mapping = aes(
x = complete_cancer_m_values_gene$mean_cancer_m_values,
y = complete_healthy_m_values_gene$mean_healthy_m_values
),
colour = "red",
size = 2,
) +
geom_smooth(
mapping = aes(
x = complete_cancer_m_values$mean_cancer_m_values,
y = complete_healthy_m_values$mean_healthy_m_values
),
na.rm = TRUE,
alpha = 1 / 10
) +
labs(x = "Mean cancer m-values",
y = "Mean healthy m-values",
title = "Comparison of mean m-values") +
theme_bw() +
xlim(-12, 9) +
ylim(-12, 9) +
geom_abline(
mapping = NULL,
data = NULL,
slope = 1,
intercept = 0,
colour = "yellow2"
)
#showing SD of cancer m-values vs. SD of healthy m-values
ggplot() +
geom_point(
mapping = aes(
x = complete_cancer_m_values$sd_cancer_m_values,
y = complete_healthy_m_values$sd_healthy_m_values
),
na.rm = TRUE,
alpha = 1 / 10
) +
geom_point(
mapping = aes(
x = complete_cancer_m_values_gene$sd_cancer_m_values,
y = complete_healthy_m_values_gene$sd_healthy_m_values
),
colour = "red",
size = 2,
) +
labs(x = "SD cancer m-values",
y = "SD healthy m-values",
title = "Comparison of SD of m-values") +
theme_bw()
#comparing mean beta values and mean m values
#cancer
ggplot() +
geom_point(
mapping = aes(
x = complete_cancer_m_values$mean_cancer_m_values,
y = rowMeans(cancer_beta_values)
),
na.rm = TRUE,
alpha = 1 / 10
) +
geom_smooth(
mapping = aes(
x = complete_cancer_m_values$mean_cancer_m_values,
y = rowMeans(cancer_beta_values)
),
na.rm = TRUE,
alpha = 1 / 10
) +
labs(x = "Mean cancer beta values",
y = "Mean cancer m values",
title = "Comparison of mean values") +
theme_bw()
#healthy
ggplot() +
geom_point(
mapping = aes(
x = complete_healthy_m_values$mean_healthy_m_values,
y = rowMeans(healthy_beta_values)
),
na.rm = TRUE,
alpha = 1 / 10
) +
geom_smooth(
mapping = aes(
x = complete_healthy_m_values$mean_healthy_m_values,
y = rowMeans(healthy_beta_values)
),
na.rm = TRUE,
alpha = 1 / 10
) +
labs(x = "Mean healthy beta values",
y = "Mean healthy m values",
title = "Comparison of mean values") +
theme_bw()
function_inf <- function(x) {
if (x == 1) {
return(0.99999)
} else {return(x)}
}
function_minus_inf <- function(x) {
if (x == 0) {
return(0.00001)
} else {return(x)}
}
cancer_beta_values <- as.data.frame(apply(cancer_beta_values, MARGIN = c(1,2), FUN = function_inf))
cancer_beta_values <- as.data.frame(apply(cancer_beta_values, MARGIN = c(1,2), FUN = function_minus_inf))
healthy_beta_values <- as.data.frame(apply(healthy_beta_values, MARGIN = c(1,2), FUN = function_inf))
healthy_beta_values <- as.data.frame(apply(healthy_beta_values, MARGIN = c(1,2), FUN = function_minus_inf))
cancer_m_values <-
data.frame(log2(cancer_beta_values / (1 - cancer_beta_values)))
healthy_m_values <-
data.frame(log2(healthy_beta_values / (1 - healthy_beta_values)))
# changing healthy patients names
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_NBC_NC11_41.bed"] <-
"Bcell_naive_VB_NBC_NC11_41.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_NBC_NC11_83.bed"] <-
"Bcell_naive_VB_NBC_NC11_83.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_S001JP51.bed"] <-
"Bcell_naive_VB_S001JP51.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_S00DM851.bed"] <-
"Bcell_naive_VB_S00DM851.M"
names(healthy_m_values)[names(healthy_m_values) == "Bcell_naive_VB_S01ECGA1.bed"] <-
"Bcell_naive_VB_S01ECGA1.M"
# changing cancer patients names
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FE8A1.bed"] <-
"cancer_VB_S01FE8A1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FF6A1.bed"] <-
"cancer_VB_S01FF6A1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FH2A1.bed"] <-
"cancer_VB_S01FH2A1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FJZA1.bed"] <-
"cancer_VB_S01FJZA1.M"
names(cancer_m_values)[names(cancer_m_values) == "cancer_VB_S01FKXA1.bed"] <-
"cancer_VB_S01FKXA1.M"
#data reduction with PCA
# cancer
cancer_m_values.pca <- prcomp(cancer_m_values)
summary(cancer_m_values.pca)
#healthy
healthy_m_values.pca <- prcomp(healthy_m_values)
summary(healthy_m_values.pca)
?prcomp
?merge
#merging both m value dataframes (healthy and cancer) into one again for PCA
complete_m_values <- merge(cancer_m_values, healthy_m_values)
view(complete_m_values)
View(cancer_m_values)
View(complete_m_values)
?cbind
#merging both m value dataframes (healthy and cancer) into one again for PCA
complete_m_values <- cbind(healthy_m_values, cancer_m_values)
View(complete_m_values)
View(healthy_m_values.pca)
View(healthy_m_values)
View(healthy_m_values.pca)
class(complete_m_values)
#Apply PCA on data frame "complete_m_values" with all m values. For that, the matrix needs to be transposed first
#variables are scaled to have i) standard deviation one and ii) mean zero
complete_m_values.pca <- prcomp(t(complete_m_values), scale = TRUE)
#Apply PCA on data frame "complete_m_values" with all m values. For that, the matrix needs to be transposed first
#(variables are scaled to have i) standard deviation one and ii) mean zero)
complete_m_values.pca <- prcomp(t(complete_m_values))
View(complete_m_values.pca)
View(complete_m_values.pca$x)
plot(pca$x[,1], pca$x[,2])
plot(complete_m_values.pca$x[,1], complete_m_values.pca$x[,2])
summary(complete_m_values.pca)
install.packages("factoextra")
library(factoextra)
fviz_pca_ind(res.pca,
col.ind = groups, # color by groups
palette = c("#seagreen2",  "#indianred1"),
legend.title = "Samples",
repel = TRUE
)
fviz_pca_ind(complete_m_values.pca,
col.ind = groups, # color by groups
palette = c("#seagreen2",  "#indianred1"),
legend.title = "Samples",
repel = TRUE
)
?match
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
install_github("ggbiplot", "vqv")
ggplot() +
geom_point(
mapping = aes(
x = complete_cancer_m_values$mean_cancer_m_values,
y = complete_healthy_m_values$mean_healthy_m_values
),
na.rm = TRUE,
alpha = 1 / 10
) +
geom_point(
mapping = aes(
x = complete_cancer_m_values_gene$mean_cancer_m_values,
y = complete_healthy_m_values_gene$mean_healthy_m_values
),
colour = "red",
size = 2,
) +
geom_smooth(
mapping = aes(
x = complete_cancer_m_values$mean_cancer_m_values,
y = complete_healthy_m_values$mean_healthy_m_values
),
na.rm = TRUE,
alpha = 1 / 10
) +
labs(x = "Mean cancer m-values",
y = "Mean healthy m-values",
title = "Comparison of mean m-values") +
theme_bw() +
xlim(-12, 9) +
ylim(-12, 9) +
geom_abline(
mapping = NULL,
data = NULL,
slope = 1,
intercept = 0,
colour = "yellow2"
)
install.packages("tidyverse")
View(complete_m_values.pca$x)
#adding an extra column with the category of sample with which we can color the pc dots in a ggplot according to their sample group
pcs_of_m_values <- cbind(complete_m_values.pca$x, c("Control", "Control", "Control", "Control", "Control", "MCL", "MCL", "MCL", "MCL", "MCL"))
View(pcs_of_m_values)
?colnames
colnames(pcs_of_m_values[,11]) <- "Sample"
#adding an extra column with the category of sample with which we can color the pc dots in a ggplot according to their sample group
pcs_of_m_values <- cbind(complete_m_values.pca$x, Samples = c("Control", "Control", "Control", "Control", "Control", "MCL", "MCL", "MCL", "MCL", "MCL"))
View(pcs_of_m_values)
ggplot(pcs_of_m_values, aes(x=PC1, y=PC2, group=Samples)) +
geom_point(aes(shape=Sample, color=Samples))
#adding an extra column with the category of sample with which we can color the pc dots in a ggplot according to their sample group
pcs_of_m_values <- data.frame(cbind(complete_m_values.pca$x, Samples = c("Control", "Control", "Control", "Control", "Control", "MCL", "MCL", "MCL", "MCL", "MCL")))
class(pcs_of_m_values)
ggplot(pcs_of_m_values, aes(x=PC1, y=PC2, group=Samples)) +
geom_point(aes(shape=Sample, color=Samples))
ggplot(pcs_of_m_values, aes(x=PC1, y=PC2, group=Samples)) +
geom_point(aes(shape=Samples, color=Samples))
?geom_point
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color=Samples("seagreen2"), size=4))
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color=Samples,color="seagreen2", size=4))
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color="seagreen2""indigored1", size=4))
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color="seagreen2", size=4))
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color= seagreen2, size=4))
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color= Samples, size=4))
ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color= factor(Samples), size=4))
View(important_genes)
loading_scores <- complete_m_values.pca$rotation[,1]
ranking_gene_loading <- sort(abs(loading_scores), decreasing = TRUE)
ranked_gene_loading <- sort(abs(loading_scores), decreasing = TRUE)
top_25_genes <- names(ranked_gene_loading[1:25])
View(top_25_genes)
View(important_genes)
complete_m_values.pca$rotation[top_25_genes,1]
?round
?scale_color_manual
p <- ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color=Samples, size=4))
p + scale_colour_manual(values=c("seagreen2", "indianred1"))
#generate a ggplot/scatterplot to visualize the Sample points in a coordinate system with x-axis = PC1 and y-axis = PC2
p <- ggplot(pcs_of_m_values, aes(round(PC1,PC2), group=Samples)) +
geom_point (aes(shape=Samples, color=Samples, size=4))
p + scale_colour_manual(values=c("seagreen2", "indianred1"))
#generate a ggplot/scatterplot to visualize the Sample points in a coordinate system with x-axis = PC1 and y-axis = PC2
p <- ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color=Samples, size=4))
p + scale_colour_manual(values=c("seagreen2", "indianred1"))
#generate a ggplot/scatterplot to visualize the Sample points in a coordinate system with x-axis = PC1 and y-axis = PC2
p <- ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color=Samples), size=4)
p + scale_colour_manual(values=c("seagreen2", "indianred1"))
rounded_PC1 <- round(PC1)
rounded_PC1 <- round(pcs_of_m_values[,1])
View(pcs_of_m_values)
View(cancer_m_values.pca)
hist(complete_m_values.pca$Proportion of Variance)
#visualize pca
plot(complete_m_values.pca$x[,1], complete_m_values.pca$x[,2])
#generate a ggplot/scatterplot to visualize the Sample points in a coordinate system with x-axis = PC1 and y-axis = PC2
p <- ggplot(pcs_of_m_values, aes(PC1,PC2, group=Samples)) +
geom_point (aes(shape=Samples, color=Samples), size=4)
p + scale_colour_manual(values=c("seagreen2", "indianred1"))
