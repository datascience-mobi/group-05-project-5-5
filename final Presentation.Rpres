Are differentially methylated regions within genes associated with mantle cell lymphoma?
========================================================
author: Pascal Lafrenz, Mari Hambardzumyan, Lea Herzel, Franziska Lam
date: July 24. 2019
autosize: true

Project milestones
========================================================

$$~$$

1. Data processing 
2. Data normalization and visualization 
3. Data reduction
4. Regression and interpretation

1. Data processing
========================================================
Initial goal: retail 90% of the information after data processing.
$$~$$

How many genes across 10 samples in total?
```{r, echo=FALSE}
Samples <- readRDS(file = "Mantle-Bcell_list.RDS.gz")
Gene_data_frame <- Samples$genes
input_data_csv <-
  read.csv(file = "sample_annotation.csv", sep = ",")
```

```{r}
dim(Gene_data_frame)
```
$$~$$

Problem: Methylation differences in sex chromosomes

Solution:
```{r}
Gene_data_frame_x_y <- 
  Gene_data_frame[-which(Gene_data_frame$Chromosome == "chrX"),]
Gene_data_frame_x_y <- 
  Gene_data_frame_x_y[-which(Gene_data_frame_x_y$Chromosome == "chrY"),]
```

How do the coverages look?
========================================================

```{r, echo=FALSE}
healthy_coverage <- Gene_data_frame_x_y[, 21:25]
cancer_coverage <- Gene_data_frame_x_y[, 26:30]
healthy_beta_values <- Gene_data_frame_x_y[, 11:15]
cancer_beta_values <- Gene_data_frame_x_y[, 16:20]
```

```{r, echo = F, fig.height=7, fig.width=9}
mean_cancer_coverage <- rowMeans(cancer_coverage)
hist(
  log10(mean_cancer_coverage),
  breaks = "fd",
  main = "Cancer coverage: Mean frequency",
  xlab = "Common logarithm of coverages",
  col = "indianred2",
  border = "gray20"
)
abline(v = log10(quantile(
  mean_cancer_coverage,
  probs = seq(0, 1, 0.1),
  na.rm = TRUE
)),
col = "black",
lty = 5,
lwd = 1)


mean_healthy_coverage <- rowMeans(healthy_coverage)
hist(
  log10(mean_healthy_coverage),
  breaks = "fd",
  main = "Healthy coverage: Mean frequency",
  xlab = "Common logarithm of coverages",
    col = "seagreen2",
    border = "gray20"
)
abline(v = log10(quantile(
  mean_healthy_coverage,
  probs = seq(0, 1, 0.1),
  na.rm = TRUE
)),
col = "black",
lty = 5,
lwd = 1)
``` 


Problem: Unreliable coverages
========================================================
$$~$$

Solution: Setting a threshold
```{r}
threshold_cancer_lower <-
  quantile(mean_cancer_coverage,
           probs = 0.05,
           na.rm = TRUE)
threshold_cancer_upper <-
  quantile(mean_cancer_coverage,
           probs = 0.999,
           na.rm = TRUE)

threshold_healthy_lower <-
  quantile(mean_healthy_coverage,
           probs = 0.05,
           na.rm = TRUE)
threshold_healthy_upper <-
  quantile(mean_healthy_coverage,
           probs = 0.999,
           na.rm = TRUE)
```

Applying thresholds to the coverages
========================================================
$$~$$

```{r}
cancer_threshold_function <- function(cancer_coverage) {
  if(cancer_coverage <= threshold_cancer_lower) {
    return("NA")}
  else {return(cancer_coverage)}
  
  if(cancer_coverage >= threshold_cancer_upper) {
    return("NA")}
  else{return(cancer_coverage)}
}

cancer_coverage <- apply(cancer_coverage, MARGIN = c(1,2), FUN = cancer_threshold_function)

cancer_coverage[cancer_coverage == "NA"] <- NA 
cancer_beta_values[cancer_coverage == "NA"] <- NA
```

Problem: NA's in beta-values
========================================================
$$~$$
```{r, echo = F}
cancer_beta_values$Number_of_NA_cancer <-
  rowSums(is.na(cancer_beta_values))
cancer_beta_values$Number_of_NA_healthy <-
  rowSums(is.na(healthy_beta_values))

healthy_beta_values$Number_of_NA_healthy <-
  rowSums(is.na(healthy_beta_values))
healthy_beta_values$Number_of_NA_cancer <-
  rowSums(is.na(cancer_beta_values))
```

Solution: 
```{r}
cancer_beta_values <-
  cancer_beta_values[-which(
    cancer_beta_values$Number_of_NA_cancer >= 3 |
      cancer_beta_values$Number_of_NA_healthy >= 3
  ),]
healthy_beta_values <-
  healthy_beta_values[-which(
    healthy_beta_values$Number_of_NA_cancer >= 3 |
      healthy_beta_values$Number_of_NA_healthy >= 3
  ),]
sum(rownames(healthy_beta_values) != rownames(cancer_beta_values))
```

Faith of the remaining NA's
========================================================

```{r}
transposed_cancer_beta_values <- t(cancer_beta_values)
transposed_healthy_beta_values <- t(healthy_beta_values)

for (i in 1:ncol(transposed_cancer_beta_values)) {
  transposed_cancer_beta_values[is.na(transposed_cancer_beta_values[, i]), i] <-
    mean(transposed_cancer_beta_values[, i], na.rm = TRUE)
}
for (i in 1:ncol(transposed_healthy_beta_values)) {
  transposed_healthy_beta_values[is.na(transposed_healthy_beta_values[, i]), i] <-
    mean(transposed_healthy_beta_values[, i], na.rm = TRUE)
}

cancer_beta_values <- data.frame(t(transposed_cancer_beta_values))
healthy_beta_values <- data.frame(t(transposed_healthy_beta_values))
```
Checking if initial goal fulfilled:
```{r}
dim(cancer_beta_values)/dim(Gene_data_frame_x_y)
```

2. Data normalization and vizualisatio
========================================================












Reducing Data
========================================================
```{r}
cancer_beta_values[cancer_beta_values == 0] <- 0.00001
cancer_beta_values[cancer_beta_values == 1] <- 0.99999
healthy_beta_values[healthy_beta_values == 0] <- 0.00001
healthy_beta_values[healthy_beta_values == 1] <- 0.99999

cancer_m_values <-
  data.frame(log2(cancer_beta_values / (1 - cancer_beta_values)))
healthy_m_values <-
  data.frame(log2(healthy_beta_values / (1 - healthy_beta_values)))
```

unn?tig? Da vorher schon mal berechnet

======================================================
```{r}
colnames(healthy_m_values) <-
  c(
    "Bcell_naive_VB_NBC_NC11_41.M",
    "Bcell_naive_VB_NBC_NC11_83.M",
    "Bcell_naive_VB_S001JP51.M",
    "Bcell_naive_VB_S00DM851.M",
    "Bcell_naive_VB_S01ECGA1.M"
  )

colnames(cancer_m_values) <- c(
  "cancer_VB_S01FE8A1.M",
  "cancer_VB_S01FF6A1.M",
  "cancer_VB_S01FH2A1.M",
  "cancer_VB_S01FJZA1.M",
  "cancer_VB_S01FKXA1.M"
)
```


======================================================
```{r}
m_values <- cbind(healthy_m_values, cancer_m_values)
pca_m_values <- prcomp(t(m_values))
summary(pca_m_values)
```


======================================================
```{r}
pcs_of_m_values <-
  data.frame(cbind(
    pca_m_values$x,
    Samples = c(
      "Healthy",
      "Healthy",
      "Healthy",
      "Healthy",
      "Healthy",
      "Cancer",
      "Cancer",
      "Cancer",
      "Cancer",
      "Cancer"
    )
  ))

p <-
  ggplot(pcs_of_m_values, aes(x = PC1, y = PC2, group = Samples)) +
  geom_point (aes(shape = Samples, color = Samples), size = 4) +
  theme_bw() +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank()
  ) + 
  scale_colour_manual(values = c("indianred2", "seagreen2"))
ggplotly(p)
```


=======================================================
```{r}
wss <-  sapply(1:5, function(k) {
  kmeans(x = pca_m_values$x,
         centers = k,
         iter.max = 100)$tot.withinss
})
plot(
  1:5,
  wss,
  type = "b",
  pch = 19,
  xlab = "Number of clusters K",
  ylab = "Total within-clusters sum of squares"
)
```


======================================================
```{r}

```

frei f?r Teil, bei dem ich nicht sicher bin, ob wir den brauchen

======================================================
```{r}

```

frei f?r Teil, bei dem ich nicht sicher bin, ob wir den brauchen

======================================================
```{r}
std_dev <- pca_m_values$sdev
variance <- std_dev ^ 2
prop_var <- variance / sum(variance)

plot(
  prop_var,
  main = "Variance explained by principal components",
  xlab = "Principal Components",
  ylab = "Proportion of Variance Explained",
  type = "b"
)
```


=======================================================
```{r}
p_values_matrix <- matrix(nrow = 8, ncol = 3)
colnames(p_values_matrix) <- c("PC1", "PC2", "PC3")
rownames(p_values_matrix) <-
  c(
    "BIOMATERIAL_PROVIDER",
    "BIOMATERIAL_TYPE",
    "DISEASE",
    "DONOR_SEX",
    "SEQ_RUNS_COUNT",
    "DONOR_AGE",
    "SUBMISSION_DATE",
    "CELL_TYPE"
  )
```


======================================================
```{r}
batch_pcs <-
  cbind(pcs_of_m_values[, 1:3], c(input_data_csv[, c(
    "BIOMATERIAL_PROVIDER",
    "BIOMATERIAL_TYPE",
    "cellTypeShort",
    "DONOR_SEX",
    "DISEASE",
    "FIRST_SUBMISSION_DATE",
    "SEQ_RUNS_COUNT",
    "DONOR_AGE"
  )]))
```


======================================================
```{r}
batch_pcs <- within(batch_pcs, {
  PC1 <- as.numeric(as.character(PC1))
})

batch_pcs <- within(batch_pcs, {
  PC2 <- as.numeric(as.character(PC2))
})

batch_pcs <- within(batch_pcs, {
  PC3 <- as.numeric(as.character(PC3))
})
```


Wilcoxon Rank Sum Test
======================================================
```{r}
for (i in 1:ncol(p_values_matrix)) {
  bio_prov_test <- wilcox.test(
    batch_pcs [, i] ~ batch_pcs$BIOMATERIAL_PROVIDER,
    mu = 0,
    alt = "two.sided",
    conf.int = T,
    conf.level = 0.99,
    paired = F,
    exact = T
  )
  p_values_matrix  [1, i] <- as.matrix(bio_prov_test$p.value)
  
  bio_type_test <- wilcox.test(
    batch_pcs [, i] ~ batch_pcs$BIOMATERIAL_TYPE,
    mu = 0,
    alt = "two.sided",
    conf.int = T,
    conf.level = 0.99,
    paired = F,
    exact = T
  )
  p_values_matrix  [2, i] <- as.matrix(bio_type_test$p.value)
  
  disease_test <- wilcox.test(
    batch_pcs[, i] ~ batch_pcs$DISEASE,
    mu = 0,
    alt = "two.sided",
    conf.int = T,
    conf.level = 0.99,
    paired = F,
    exact = T
  )
  p_values_matrix  [3, i] <- as.matrix(disease_test$p.value)
  
  donor_sex_test <- wilcox.test(
    batch_pcs [, i] ~ batch_pcs$DONOR_SEX,
    mu = 0,
    alt = "two.sided",
    conf.int = T,
    conf.level = 0.99,
    paired = F,
    exact = T
  )
  p_values_matrix  [4, i] <- as.matrix(donor_sex_test$p.value)
  
   cell_type_test <- wilcox.test(
    batch_pcs [, i] ~ batch_pcs$cellTypeShort,
    mu = 0,
    alt = "two.sided",
    conf.int = T,
    conf.level = 0.99,
    paired = F,
    exact = T
  )
  p_values_matrix  [8, i] <- as.matrix(cell_type_test$p.value)
```

wichtig

Kruskal-Wallis Rank Sum Test
=======================================================
```{r}
submission_date_test <-
    kruskal.test(batch_pcs [, i] ~ batch_pcs$FIRST_SUBMISSION_DATE,
                 data = batch_pcs)
  p_values_matrix  [7, i] <-
    as.matrix(submission_date_test$p.value)
```

wichtig

Monte Carlo Permutation Test
=======================================================
```{r}
cor.perm <- function (x, y, nperm = 1000)
{
  r.obs <- cor (x = x, y = y)
  p_value <- cor.test (x = x, y = y)$p.value
  #  r.per <- replicate (nperm, expr = cor (x = x, y = sample (y)))
  r.per <-
    sapply (
      1:nperm,
      FUN = function (i)
        cor (x = x, y = sample (y))
    )
  r.per <- c(r.per, r.obs)
  P.per <- sum (abs (r.per) >= abs (r.obs)) / (nperm + 1)
  return (list (
    r.obs = r.obs,
    p_value = p_value,
    P.per = P.per
  ))
}
```

wichtig

Permutation Test: Monte Carlo
==============================================
```{r}
  seq_runs_count_test <-
    cor.perm (x = batch_pcs [, i], y = batch_pcs$SEQ_RUNS_COUNT)
  p_values_matrix  [5, i] <-
    as.matrix(seq_runs_count_test$p_value)

  donor_age_test <-
    cor.perm (x = batch_pcs [, i],
              y = c(62, 47, 72, 52, 62, 82, 67, 82, 77, 62))
  p_values_matrix  [6, i] <- as.matrix(donor_age_test$p_value)
```

wichtig

=============================================
```{r}
my_palette <- colorRampPalette(c("indianred2", "seagreen2")) (n = 3)
color_breaks <- c(seq(0, 0.01, length = 2),
                  seq(0.011, 1, length = 2))
heatmap.2(
  p_values_matrix,
  main = "Batch and biological effects",
  trace = "none",
  margins = c(10, 12),
  cexRow = 0.8,
  Rowv = FALSE,
  Colv = FALSE,
  col = my_palette,
  breaks = color_breaks,
  sepwidth = c(0.01, 0.01),
  sepcolor = "black",
  colsep = 1:ncol(p_values_matrix),
  rowsep = 1:nrow(p_values_matrix)
)
```

=============================================
```{r}

```

3 Plots fehlen noch, weil sie noch nicht richtig sind

=============================================
```{r}

```

3 Plots fehlen noch, weil sie noch nicht richtig sind

=============================================
```{r}

```

3 Plots fehlen noch, weil sie noch nicht richtig sind

=============================================
```{r}

```

=============================================
```{r}

```


=============================================
```{r}

```

=============================================
```{r}

```







